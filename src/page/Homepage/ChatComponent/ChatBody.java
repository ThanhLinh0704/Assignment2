/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package page.Homepage.ChatComponent;

import database.DBConnection;
import java.awt.Adjustable;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author trunk
 */
public class ChatBody extends javax.swing.JPanel {
    
    // who is use chatBody at this moment
    public int currentUserId = 0;
    public ChatBody() {
        initComponents();
        init();


    }

    public void init() {

        body.setLayout(new MigLayout("fillx", "", "5[]5"));
        sp.setVerticalScrollBar(new JScrollBar());
        sp.getVerticalScrollBar().setBackground(Color.WHITE);
        sp.getVerticalScrollBar().setUnitIncrement(30);


    }

    public void addItemLeft(String text) {
        ChatLeft item = new ChatLeft();
        item.setText(text);
        body.add(item, "wrap, w :: 60%");
        body.repaint();
        body.revalidate();
        scrollToBottom();

    }

    public void addItemRight(String text) {
        ChatRight item = new ChatRight();
        item.setText(text);
        body.add(item, "wrap, al right, w :: 60%");
        body.repaint();
        body.revalidate();
        scrollToBottom();
    }

    public void loadText(int friendID, int userID) {
        System.out.println("remove all first");
        body.removeAll();
        body.repaint();
        body.revalidate();
        try {
            Connection c = DBConnection.getConnection();

            Statement st = c.createStatement();

            String sqlGetFriendship1 = "SELECT id FROM friendships WHERE userID = + " + userID + " AND friendID =  " + friendID;

            ResultSet rsFriendship1 = st.executeQuery(sqlGetFriendship1);
            int friendship1 = 0;
            while (rsFriendship1.next()) {
                friendship1 = rsFriendship1.getInt("id");
            }

            String sqlGetFriendship2 = "SELECT id FROM friendships WHERE userID = + " + friendID + " AND friendID =  " + userID;
            ResultSet rsFriendship2 = st.executeQuery(sqlGetFriendship2);
            int friendship2 = 0;
            while (rsFriendship2.next()) {
                friendship2 = rsFriendship2.getInt("id");
            }

            String sql1 = "SELECT * FROM textofchatting WHERE friendshipid = " + friendship1 + " UNION ALL " + "(SELECT * FROM textofchatting WHERE friendshipid = " + friendship2 + ") ORDER BY timeoftext";

            ResultSet rs = st.executeQuery(sql1);

            while (rs.next()) {
                int friendshipID = rs.getInt("friendshipid");
                String content = rs.getString("content");

                if (friendship1 == friendshipID) {
                    this.addItemRight(content);

                } else if (friendship2 == friendshipID) {
                    this.addItemLeft(content);
                }

            }

            DBConnection.closeConnection(c);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void scrollToBottom() {
        JScrollBar verticalBar = sp.getVerticalScrollBar();
        AdjustmentListener downScroller = new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                Adjustable adjustable = e.getAdjustable();
                adjustable.setValue(adjustable.getMaximum());
                verticalBar.removeAdjustmentListener(this);
            }
        };
        verticalBar.addAdjustmentListener(downScroller);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sp = new javax.swing.JScrollPane();
        body = new javax.swing.JPanel();

        sp.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        sp.setToolTipText("");
        sp.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        sp.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        body.setBackground(new java.awt.Color(255, 153, 0));
        body.setLayout(new javax.swing.BoxLayout(body, javax.swing.BoxLayout.LINE_AXIS));
        sp.setViewportView(body);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel body;
    private javax.swing.JScrollPane sp;
    // End of variables declaration//GEN-END:variables

}
